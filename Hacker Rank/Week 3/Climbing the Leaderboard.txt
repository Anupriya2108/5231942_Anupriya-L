Climbing the Leaderboard


#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

int* climbingLeaderboard(int ranked_count, int* ranked, int player_count, int* player, int* result_count) {
     int* scores = malloc(ranked_count * sizeof(int));
    int unique_count = 0;
    scores[0] = ranked[0];
    unique_count = 1;
    for (int i = 1; i < ranked_count; i++) {
        if (ranked[i] != ranked[i - 1]) {
            scores[unique_count++] = ranked[i];
        }
    }


    int* result = malloc(player_count * sizeof(int));
    *result_count = player_count;

    int idx = unique_count - 1; 
    for (int i = 0; i < player_count; i++) {
        while (idx >= 0 && player[i] >= scores[idx]) {
            idx--;
        }
        result[i] = idx + 2;
    }

    free(scores);
    return result;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int ranked_count = parse_int(ltrim(rtrim(readline())));
    char** ranked_temp = split_string(rtrim(readline()));
    int* ranked = malloc(ranked_count * sizeof(int));
    for (int i = 0; i < ranked_count; i++) {
        ranked[i] = parse_int(*(ranked_temp + i));
    }

    int player_count = parse_int(ltrim(rtrim(readline())));
    char** player_temp = split_string(rtrim(readline()));
    int* player = malloc(player_count * sizeof(int));
    for (int i = 0; i < player_count; i++) {
        player[i] = parse_int(*(player_temp + i));
    }

    int result_count;
    int* result = climbingLeaderboard(ranked_count, ranked, player_count, player, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d\n", result[i]);
    }

    fclose(fptr);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;
        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) break;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }
    return data;
}

char* ltrim(char* str) {
    while (*str && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
